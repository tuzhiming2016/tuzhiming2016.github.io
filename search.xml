<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/11/23/shi-jian-ji-chu/"/>
      <url>/2019/11/23/shi-jian-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="线控转向"><a href="#线控转向" class="headerlink" title="线控转向"></a>线控转向</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p> 线控转向系统由方向盘总成、电控单元和转向执行机构这三大部分组成 。</p> <img src="https://raw.githubusercontent.com/tuzhiming2016/MyBlogFigure/img/img/线控转向结构.png"><p>线控转向系统结构如上图，主要分为三个部分：</p><p>方向盘总成：包括转向盘、转矩传感器、转向角传感器、转矩反馈电动机和机械传动装置；</p><p>电控单元：包括车速传感器，可增加横摆角速度传感器、加速度传感器和电子控制单元以提高车辆的操纵稳定性；</p><p>转向系统：包括角位移传感器、转向电动机、齿轮齿条转向机构和其他机械转向装置等。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​        当转向盘转动时，转矩传感器和转向角传感器将测量到的驾驶员转矩和转向盘的转角转变成电信号输入到电子控制器（ECU），ECU依据车速传感器和安装在转向传动机构上的位移传感器的信号来控制转矩反馈电动机的旋转方向，并根据转向力模拟、生成反馈转矩，控制转向电动机的旋转方向、转矩大小和旋转的角度，通过机械转向装置控制转向轮的转向位置。 </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>省去了转向柱机械结构，转向系统的结构得到简化，节约了驾驶舱的空间，减轻转向系统的重量，提高汽车的燃油经济性。</li><li>驾驶员将不再感受到路面颠簸所带来的方向盘振动，汽车发生正面碰撞事故时驾驶员也不会受到转向柱的伤害，节省出来的空间可以布置腿部安全气囊，极大地提高汽车的安全性能。</li><li>因路面颠簸不平而产生的冲击则不会传递到驾驶员的手上，较少驾驶员体力消耗，出入空间增加，提升了驾驶舒适性。 </li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要较高功率的力反馈电机和转向执行电机； </li><li>复杂的力反馈电机和转向执行电机的算法实现； </li><li>冗余设备导致额外增加成本和重量。</li></ol><h3 id="布置形式"><a href="#布置形式" class="headerlink" title="布置形式"></a>布置形式</h3><p>转向电机的数量、布置位置与控制方式不同</p><p><img src="https://raw.githubusercontent.com/tuzhiming2016/MyBlogFigure/img/img/%E7%BA%BF%E6%8E%A7%E8%BD%AC%E5%90%91%E5%B8%83%E7%BD%AE%E7%B1%BB%E5%9E%8B.png" alt=""></p><h3 id="冗余设计"><a href="#冗余设计" class="headerlink" title="冗余设计"></a>冗余设计</h3><p> SBW线控转向系统有两种“冗余”设计方式</p><ol><li><p>通过传统的转向管柱将方向盘与转向执行机构连接在一起，基本形态与普通燃油车无异，但在转向管柱与转向执行机构之间有电控多片离合器相连。</p><p>​                                         <img src="https://img1.gtimg.com/auto/pics/hv1/60/189/2307/150060930.jpg" alt="自动驾驶的核心？浅谈线控转向技术" style="zoom:50%;"> </p></li><li><p>在执行机构处（转向机构）采用多个电机控制来实现冗余度，在方向盘处通过多个传感器布置来实现输入信号的冗余度， 这种冗余方式更先进，但成本非常高，这相当于需要制造两套重复的转向机构，但是这种设计可以完全取消掉转向管柱。</p></li></ol><h3 id="设计线控转向应考虑的问题"><a href="#设计线控转向应考虑的问题" class="headerlink" title="设计线控转向应考虑的问题"></a>设计线控转向应考虑的问题</h3><p>1.可靠性问题，冗余设计</p><p>2.路感控制，反馈力矩估计，路感电机控制</p><p>3.布置形式，空间布置</p><p>4.抗干扰控制</p><h2 id="平台框架"><a href="#平台框架" class="headerlink" title="平台框架"></a>平台框架</h2><p> 实时操作系统（RTOS）是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统做出快速响应，调度一切可利用的资源完成实时任务，并控制所有实时任务协调一致运行的操作系统。提供及时响应和高可靠性是其主要特点。 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Note</title>
      <link href="/2019/11/23/note/"/>
      <url>/2019/11/23/note/</url>
      
        <content type="html"><![CDATA[<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>各种语言的函数学习，代码学习</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#i从0到99</span>range<span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span><span class="token punctuation">]</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span>xrange<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span><span class="token punctuation">]</span> stop<span class="token punctuation">[</span><span class="token punctuation">,</span> step<span class="token punctuation">]</span><span class="token punctuation">)</span>zip<span class="token punctuation">(</span>xp<span class="token punctuation">,</span> yp<span class="token punctuation">)</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>xp<span class="token punctuation">,</span>yp<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="note.assets/image-20191120204632047.png" alt="image-20191120204632047"></p><p><img src="note.assets/image-20191120204404657.png" alt="image-20191120204404657"></p><p><img src="note.assets/image-20191120204448229.png" alt="image-20191120204448229"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>拉格朗日插值算法</title>
      <link href="/2019/11/23/lagrange-interpolation/"/>
      <url>/2019/11/23/lagrange-interpolation/</url>
      
        <content type="html"><![CDATA[<h2 id="拉格朗日插值算法"><a href="#拉格朗日插值算法" class="headerlink" title="拉格朗日插值算法"></a>拉格朗日插值算法</h2><p>源代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''Lagrange InterpolationImplement Lagrange interpolation using PythonAuthor:Tu ZhiMing'''</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">class</span> <span class="token class-name">Lagrange</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    Lagrange Interpolation Class    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x <span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>nx <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>yk <span class="token operator">=</span> y        self<span class="token punctuation">.</span>lk_den <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nx<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nx<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">==</span>j<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                self<span class="token punctuation">.</span>lk_den<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">elif</span> x <span class="token operator">></span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        lk_num <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nx<span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nx<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">==</span>j<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                lk_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> x <span class="token operator">-</span>self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            y <span class="token operator">+=</span> self<span class="token punctuation">.</span>yk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> lk_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>self<span class="token punctuation">.</span>lk_den<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> y<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># example #1: x**2</span>    xp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span>    yp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token number">1.5</span>    Lagrange1 <span class="token operator">=</span> Lagrange<span class="token punctuation">(</span>xp<span class="token punctuation">,</span>yp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nExample #1: "</span><span class="token punctuation">)</span>    zipped_x_y <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>xp<span class="token punctuation">,</span> yp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Given points: "</span><span class="token punctuation">,</span> zipped_x_y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"interpolated y value = %.3f at x = %.3f"</span><span class="token operator">%</span> <span class="token punctuation">(</span>Lagrange1<span class="token punctuation">.</span>calc<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#example #2: x**3</span>    xp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span>    yp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">27.0</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token number">2.5</span>    Lagrange2 <span class="token operator">=</span> Lagrange<span class="token punctuation">(</span>xp<span class="token punctuation">,</span> yp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nExample #2: "</span><span class="token punctuation">)</span>    zipped_x_y <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>xp<span class="token punctuation">,</span> yp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Given points: "</span><span class="token punctuation">,</span> zipped_x_y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"interpolated y value = %.3f at x = %.3f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Lagrange2<span class="token punctuation">.</span>calc<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python"><code class="language-python">Example <span class="token comment" spellcheck="true">#1: </span>Given points<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>interpolated y value <span class="token operator">=</span> <span class="token number">2.250</span> at x <span class="token operator">=</span> <span class="token number">1.500</span>Example <span class="token comment" spellcheck="true">#2: </span>Given points<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">27.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>interpolated y value <span class="token operator">=</span> <span class="token number">16.000</span> at x <span class="token operator">=</span> <span class="token number">2.500</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Numerical Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numerical Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运用运动学模型实现路径跟踪</title>
      <link href="/2019/11/20/3-yun-yong-yun-dong-xue-mo-xing-shi-xian-lu-jing-gen-zong.assets/"/>
      <url>/2019/11/20/3-yun-yong-yun-dong-xue-mo-xing-shi-xian-lu-jing-gen-zong.assets/</url>
      
        <content type="html"><![CDATA[<h3 id="3-运用运动学模型实现路径跟踪"><a href="#3-运用运动学模型实现路径跟踪" class="headerlink" title="3 运用运动学模型实现路径跟踪"></a>3 运用运动学模型实现路径跟踪</h3><p>​        将车辆系统模型简化为运动学自行车模型是一种常用的近似方法，常用于机器人的运动规划、简单的车辆分析和（还有几何模型方法）得出直观的控制规律。本章给出了该模型的运动学方程。此外，本文还应用了针对于约束系统的控制理论的一个重要方法来重新建立运动方程，并给出了路径跟踪问题的解决方案。该方法的应用使得我们能够使用著名的控制理论工具来设计控制器并进行稳定性分析。</p><h4 id="3-1-运动学自行车模型"><a href="#3-1-运动学自行车模型" class="headerlink" title="3.1 运动学自行车模型"></a>3.1 运动学自行车模型</h4><img src="3 运用运动学模型实现路径跟踪.assets/image-20191120085740718.png" alt="image-20191120085740718" style="zoom:50%;"><p>​                                                                     图18：运动学自行车模型</p><p>​        汽车的运动学自行车模型的运动方程在文献[5,11,6,4]中很容易得到。为了使论文完整起见，这里包含了模型的推到证明。运动学自行车模型将左右车轮简化成一对位于前后轴中心的单轮，如图18所示。假定车轮没有横向滑移，只有前轮是转向轮。并且限制这个模型只能在二维平面上运动，前轮和后轮的非完整约束方程是：<br>$$<br>\dot{x}<em>{f} \sin (\theta+\delta)-\dot{y}</em>{f} \cos (\theta+\delta)=0<br>$$</p><p>$$<br>\dot{x} \sin (\theta)-\dot{y} \cos (\theta)=0<br>$$</p><p>其中$(x,y)$是后轮在全局坐标（笛卡尔坐标系）,(xf,yf)是前轮的全局坐标,$θ$是车辆在全局坐标系下的航向角,$δ$是车身坐标系下的转向角。由于前轮与后轮在车辆航向方向上距离为$L$，(xf,yf)可表示为:<br>$$<br>\begin{array}{l}{x_{f}=x+L \cos (\theta)} \ {y_{f}=y+L \sin (\theta)}\end{array}<br>$$<br>在等式(1)中除去：<br>$$<br>\begin{align}<br>\begin{aligned} 0=&amp; \frac{d(x+L \cos (\theta))}{d t} \sin (\theta+\delta)-\frac{d(y+L \sin (\theta))}{d t} \cos (\theta+\delta)<br>\<br>=&amp;(\dot{x}-\dot{\theta} L \sin (\theta)) \sin (\theta+\delta)-(\dot{y}+\dot{\theta} L \cos (\theta)) \cos (\theta+\delta)<br>\<br>=&amp; \dot{x} \sin (\theta+\delta)-\dot{y} \cos (\theta+\delta)<br>\<br>&amp;-\dot{\theta} L \sin (\theta)(\sin (\theta) \cos (\delta)+\cos (\theta) \sin (\delta)) \<br>&amp;-\dot{\theta} L \cos (\theta)(\cos (\theta) \cos (\delta)-\sin (\theta) \sin (\delta))<br>\<br>=&amp; \dot{x} \sin (\theta+\delta)-\dot{y} \cos (\theta+\delta)<br>\<br>&amp;\begin{array}{l}{-\dot{\theta} L \sin ^{2}(\theta) \cos (\delta)-\dot{\theta} L \cos ^{2}(\theta) \cos (\delta)} \ {-\dot{\theta} L \sin (\theta) \cos (\theta) \sin (\delta)+\dot{\theta} L \cos (\theta) \sin (\theta) \sin (\delta)}\end{array}<br>\<br>=&amp;\dot{x} \sin (\theta+\delta)-\dot{y} \cos (\theta+\delta)-\dot{\theta} L\left(\sin ^{2}(\theta)+\cos ^{2}(\theta)\right) \cos (\delta)<br>\<br>=&amp; \dot{x} \sin (\theta+\delta)-\dot{y} \cos (\theta+\delta)-\dot{\theta} L \cos (\delta) \end{aligned}<br>\end{align}<br>$$<br>后轮上的非完整约束，根据公式(2)，$\dot{x}$=${cos(\theta)}$(和$\dot{y}$=${sin(\theta)}$，<code>其中标量的任意倍数</code>。这个标量对应纵向速度$v$，这样<br>$$<br>\dot{x}=v \cos (\theta)<br>$$</p><p>$$<br>\dot{y}=v \sin (\theta)<br>$$</p><p>应用这个公式在前轮的约束中，根据等式1计算出$\dot{\theta}$<br>$$<br>\begin{aligned}  \dot{\theta}&amp;=\frac{\dot{x} \sin (\theta+\delta)-\dot{y} \cos (\theta+\delta)}{L \cos (\delta)} \ &amp;=\frac{v \cos (\theta)(\sin (\theta) \cos (\delta)+\cos (\theta) \sin (\delta))}{L \cos (\delta)} \end{aligned}</p><p>\<br>\begin{aligned} &amp;-\frac{v \sin (\theta)(\cos (\theta) \cos (\delta)-\sin (\theta) \sin (\delta))}{L \cos (\delta)} \=&amp; \frac{v\left(\cos ^{2}(\theta)+\sin ^{2}(\theta)\right) \sin (\delta)}{L \cos (\delta)} \=&amp; \frac{v \tan (\delta)}{L} \end{aligned}<br>$$<br> 车辆的瞬时曲率半径$R$决定从$v$和$\dot{\theta}$推导出的$\theta$前面介绍的等式1：<br>$$<br>\begin{aligned} R &amp;=\frac{v}{\dot{\theta}} \ \frac{v \tan (\delta)}{L} &amp;=\frac{v}{R} \ \tan (\delta) &amp;=\frac{L}{R} \end{aligned}<br>$$</p><p> 为了实现控制，从等式5，6，7中，写出此运动学模型是很有必要的，模型在两个随机输入下的形式：<br>$$<br>\left[\begin{array}{c}{\dot{x}} \ {\dot{y}} \ {\dot{\theta}} \ {\dot{\delta}}\end{array}\right]=\left[\begin{array}{c}{\cos (\theta)} \ {\sin (\theta)} \ {\left(\frac{\tan (\delta)}{L}\right)} \ {0}\end{array}\right] v+\left[\begin{array}{c}{0} \ {0} \ {0} \ {1}\end{array}\right] \delta<br>$$<br>其中$v$是车辆的纵向速度，$\dot{\delta}$是车辆转向轮的角速度。</p><h5 id="3-1-1-路径坐标系"><a href="#3-1-1-路径坐标系" class="headerlink" title="3.1.1 路径坐标系"></a>3.1.1 路径坐标系</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Control </tag>
            
            <tag> Translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pure_Pursuit</title>
      <link href="/1970/01/01/xue-xi-zong-jie-tu-zhi-ming/"/>
      <url>/1970/01/01/xue-xi-zong-jie-tu-zhi-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="学习总结-11-10"><a href="#学习总结-11-10" class="headerlink" title="学习总结(11.10)"></a>学习总结(11.10)</h1><p>​                                                                                                        <strong>车辆主动安全实验室    涂志明</strong>    </p><p>一.用matlab实现Pure_Pursuit算法，基于车辆几何模型（如图）</p><img src="学习总结—涂志明/image-20191110222456755.png" alt="image-20191110222456755" style="zoom: 50%;"><img src="学习总结—涂志明/image-20191110222527578.png" alt="image-20191110222527578" style="zoom: 50%;"><p>$$<br>\tan (\delta)=\frac{L}{R}<br>$$</p><p>$$<br>\frac{\ell_{d}}{\sin (2 \alpha)}=\frac{R}{\sin \left(\frac{\pi}{2}-\alpha\right)}<br>$$</p><p>$$<br>\frac{\ell_{d}}{2 \sin (\alpha) \cos (\alpha)}=\frac{R}{\cos (\alpha)}<br>$$</p><p>$$<br>\frac{\ell_{d}}{\sin (\alpha)}=2 R<br>$$</p><p>$$<br>\kappa=\frac{2 \sin (\alpha)}{\ell_{d}}<br>$$</p><p>$$<br>\delta=\tan ^{-1}(\kappa L)<br>$$</p><p>$$<br>\delta(t)=\tan ^{-1}\left(\frac{2 L \sin (\alpha(t))}{\ell_{d}}\right)<br>$$</p><p>$$<br>\sin (\alpha)=\frac{e_{\ell_{d}}}{\ell_{d}}<br>$$</p><p>$$<br>\kappa=\frac{2}{\ell_{d}^{2}} e_{\ell_{d}}<br>$$</p><p>$$<br>\delta(t)=\tan ^{-1}\left(\frac{2 L \sin (\alpha)}{k v_{x}(t)}\right)<br>$$</p><p>​        可以得知，影响纯追踪控制算法的参数主要为预瞄距离，预瞄距离与速度又有关系，这种方法在低速情况下几乎不受路径形状的影响。但是，选择最佳的前视距离的方法并不明确。将前视距离表示为速度的函数是一种常见的方法，但是，前视距离也可能是路径曲率的函数，甚至可能和纵向速度有关。在此假设为速度的一次函数，故调参时只需要调整参数K值即可，此处举出k=0.05和k=0.5的运行结果：</p><pre class="line-numbers language-matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>clc<span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">% look forward gain         %速度对预瞄距离的影响因数</span>Lfc <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">% look-ahead distance       %固定的预瞄距离</span>Kp <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">% speed propotional gain    %由目标速度和当前速度的差值，乘以kp系数，得到加速度</span>dt <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">% [s]                       %时间间隔</span>L <span class="token operator">=</span> <span class="token number">2.9</span>  <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">% [m] wheel base of vehicle %汽车的轴距</span>cx <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">%给定路径的横坐标cx取值，共501个点</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span>                       <span class="token function">cy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">%通过循环，得到给定路径的501个路点</span><span class="token keyword">end</span><span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">%从第一个路点开始，i=1</span>target_speed <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">3.6</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">%期望的汽车行驶速度</span>T <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">%行驶时间不超过100s</span>lastIndex <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">%cx表示路点横坐标的行向量，将最后一个路点赋给LastIndex</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> yaw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">%汽车初始状态，坐标为（0，-3），横摆角yaw=0，初速度v=0</span>time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">%初始时间为0 </span>Lf <span class="token operator">=</span> k <span class="token operator">*</span> v <span class="token operator">+</span> Lfc<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">%由固定预瞄距离和k*v得到最终的预瞄距离Lf</span>figure<span class="token keyword">while</span> T <span class="token operator">></span> time                          target_ind<span class="token operator">=</span> <span class="token function">calc_target_index</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>cx<span class="token punctuation">,</span>cy<span class="token punctuation">,</span>Lf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">%得到在最小路径路点基础上，得到预瞄点的顺序数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target_ind<span class="token operator">>=</span>lastIndex<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">%判断预瞄点是否到达最后路点，到达则跳出循环结束</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    ai <span class="token operator">=</span> <span class="token function">PIDcontrol</span><span class="token punctuation">(</span>target_speed<span class="token punctuation">,</span> v<span class="token punctuation">,</span>Kp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">%输入为期望速度、当前速度、P控制的kp系数，a</span>    di <span class="token operator">=</span> <span class="token function">pure_pursuit_control</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>yaw<span class="token punctuation">,</span>v<span class="token punctuation">,</span>cx<span class="token punctuation">,</span>cy<span class="token punctuation">,</span>target_ind<span class="token punctuation">,</span>k<span class="token punctuation">,</span>Lfc<span class="token punctuation">,</span>L<span class="token punctuation">,</span>Lf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%得到车辆期望转角</span>    <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>yaw<span class="token punctuation">,</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>yaw<span class="token punctuation">,</span>v<span class="token punctuation">,</span> ai<span class="token punctuation">,</span> di<span class="token punctuation">,</span>dt<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">%更新车辆t+dt时刻的状态</span>    time <span class="token operator">=</span> time <span class="token operator">+</span> dt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">%pause(0.1)</span>    <span class="token function">plot</span><span class="token punctuation">(</span>cx<span class="token punctuation">,</span>cy<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    drawnow<span class="token punctuation">;</span>    hold on<span class="token punctuation">;</span><span class="token keyword">end</span>    <span class="token comment" spellcheck="true">% plot(cx,cy,x,y,</span><span class="token string">'*'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">% hold on</span><span class="token comment" spellcheck="true">%根据根据当前的坐标（x,y),横摆角yaw，速度v，加速度a，前轮转角delta,轴距L以及时间间隔dt，</span><span class="token comment" spellcheck="true">%得到t+dt时刻的汽车实时状态，用于下一次循环</span><span class="token keyword">function</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> yaw<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> yaw<span class="token punctuation">,</span> v<span class="token punctuation">,</span> a<span class="token punctuation">,</span> delta<span class="token punctuation">,</span>dt<span class="token punctuation">,</span>L<span class="token punctuation">)</span>     x <span class="token operator">=</span> x <span class="token operator">+</span> v <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>yaw<span class="token punctuation">)</span> <span class="token operator">*</span> dt<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">%t+dt时刻的横坐标x</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> v <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>yaw<span class="token punctuation">)</span> <span class="token operator">*</span> dt<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">%t+dt时刻的纵坐标y</span>    yaw <span class="token operator">=</span> yaw <span class="token operator">+</span> v <span class="token operator">/</span> L <span class="token operator">*</span> <span class="token function">tan</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token operator">*</span> dt<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">%t+dt时刻的车辆横摆角</span>    v <span class="token operator">=</span> v <span class="token operator">+</span> a <span class="token operator">*</span> dt<span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">%t+dt时刻的车辆速度</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">PIDcontrol</span><span class="token punctuation">(</span>target_v<span class="token punctuation">,</span> current_v<span class="token punctuation">,</span> Kp<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">%对速度的控制函数</span>    a <span class="token operator">=</span> Kp <span class="token operator">*</span> <span class="token punctuation">(</span>target_v <span class="token operator">-</span> current_v<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">%得到控制速度的加速度</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token punctuation">[</span>delta<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pure_pursuit_control</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>yaw<span class="token punctuation">,</span>v<span class="token punctuation">,</span>cx<span class="token punctuation">,</span>cy<span class="token punctuation">,</span>ind<span class="token punctuation">,</span>k<span class="token punctuation">,</span>Lfc<span class="token punctuation">,</span>L<span class="token punctuation">,</span>Lf<span class="token punctuation">)</span>    tx <span class="token operator">=</span> <span class="token function">cx</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">%得到预瞄点的横坐标</span>    ty <span class="token operator">=</span> <span class="token function">cy</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">%得到预瞄点的纵坐标</span>    alpha <span class="token operator">=</span> <span class="token function">atan2</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ty<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>tx<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>yaw<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">%预瞄点与后轴中心连线与车纵轴的夹角</span>    Lf <span class="token operator">=</span> k <span class="token operator">*</span> v <span class="token operator">+</span> Lfc<span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">%车的实时预瞄距离</span>    delta <span class="token operator">=</span> <span class="token function">atan2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>L <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token operator">/</span>Lf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">%车辆期望转角</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">%输入为汽车当前坐标（x,y), 给定路径（cx，cy），预瞄距离Lf</span><span class="token keyword">function</span> <span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calc_target_index</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> cx<span class="token punctuation">,</span>cy<span class="token punctuation">,</span>Lf<span class="token punctuation">)</span>         N <span class="token operator">=</span>  <span class="token function">length</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">%取cx的个数，作为N进行循环</span>    Distance <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">%Distance为Nx1的列向量，每个元素均为0</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>N                                                 <span class="token function">Distance</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">cx</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">cy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">%对应每个路点与汽车当前坐标（x，y）的距离</span>    <span class="token keyword">end</span>    <span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">,</span> location<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Distance<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">%得到最小距离路点的位置，即第location个</span>    ind <span class="token operator">=</span> location<span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">%ind即为此时最小距离路点在给定路径路点序号</span>    LL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                  <span class="token keyword">while</span> Lf <span class="token operator">></span> LL <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">length</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">%第一种方法，用循环来计算达到预瞄距离Lf时的路点位置</span>        dx <span class="token operator">=</span> <span class="token function">cx</span><span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">cx</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span>        dy <span class="token operator">=</span> <span class="token function">cx</span><span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">cx</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span>        LL <span class="token operator">=</span> LL <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        ind  <span class="token operator">=</span> ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">%ind = ind + 10;                       %第二种方法在最小距离路点的基础上，向前预瞄到第ind+10</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 运行结果如图（k=0.05)：</p><img src="学习总结—涂志明（11.10）.assets/image-20191110222129427.png" alt="image-20191110222129427" style="zoom: 67%;"><p>运行结果如图（k=0.5):</p><img src="学习总结—涂志明（11.10）.assets/image-20191110224859841.png" alt="image-20191110224859841" style="zoom:67%;"><p>​        因此纯追踪控制器的前视距离调整应注意，很短的前视距离(k小)会造成车辆控制的不稳定甚至震荡，为了确保车辆稳定而设置较长的前视距离(k大)又会出现车辆在大转角处转向不足的问题。</p><p>二.用Python实现Pure_Pursuit算法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltk <span class="token operator">=</span> <span class="token number">0.1</span>    <span class="token comment" spellcheck="true"># 速度对预瞄距离的影响因数,当起步时速度慢，则预瞄距离小来更快到达路径上；速度快则预瞄距离长，变化更平滑</span>Lfc <span class="token operator">=</span> <span class="token number">2.0</span>  <span class="token comment" spellcheck="true"># 固定预瞄距离</span>Kp <span class="token operator">=</span> <span class="token number">1.0</span>   <span class="token comment" spellcheck="true"># 速度P控制器系数</span>dt <span class="token operator">=</span> <span class="token number">0.1</span>   <span class="token comment" spellcheck="true"># 时间间隔，单位：s</span>L <span class="token operator">=</span> <span class="token number">2.9</span>    <span class="token comment" spellcheck="true"># 车辆轴距，单位：m</span><span class="token comment" spellcheck="true"># 车辆状态类</span><span class="token keyword">class</span> <span class="token class-name">VehicleState</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> v<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>yaw <span class="token operator">=</span> yaw        self<span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token comment" spellcheck="true"># 车辆状态实时更新</span><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> a<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">:</span>    state<span class="token punctuation">.</span>x <span class="token operator">=</span> state<span class="token punctuation">.</span>x <span class="token operator">+</span> state<span class="token punctuation">.</span>v <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>state<span class="token punctuation">.</span>yaw<span class="token punctuation">)</span> <span class="token operator">*</span> dt    state<span class="token punctuation">.</span>y <span class="token operator">=</span> state<span class="token punctuation">.</span>y <span class="token operator">+</span> state<span class="token punctuation">.</span>v <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>state<span class="token punctuation">.</span>yaw<span class="token punctuation">)</span> <span class="token operator">*</span> dt    state<span class="token punctuation">.</span>yaw <span class="token operator">=</span> state<span class="token punctuation">.</span>yaw <span class="token operator">+</span> state<span class="token punctuation">.</span>v <span class="token operator">/</span> L <span class="token operator">*</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token operator">*</span> dt    state<span class="token punctuation">.</span>v <span class="token operator">=</span> state<span class="token punctuation">.</span>v <span class="token operator">+</span> a <span class="token operator">*</span> dt    <span class="token keyword">return</span> state<span class="token comment" spellcheck="true"># 横向控制器</span><span class="token keyword">def</span> <span class="token function">PControl</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> Kp <span class="token operator">*</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> current<span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token comment" spellcheck="true"># 纵向控制器</span><span class="token keyword">def</span> <span class="token function">pure_pursuit_control</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> pind<span class="token punctuation">)</span><span class="token punctuation">:</span>    ind <span class="token operator">=</span> calc_target_index<span class="token punctuation">(</span>state<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">)</span>    <span class="token keyword">if</span> pind <span class="token operator">>=</span> ind<span class="token punctuation">:</span>        ind <span class="token operator">=</span> pind    <span class="token keyword">if</span> ind <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">:</span>        tx <span class="token operator">=</span> cx<span class="token punctuation">[</span>ind<span class="token punctuation">]</span>        ty <span class="token operator">=</span> cy<span class="token punctuation">[</span>ind<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tx <span class="token operator">=</span> cx<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        ty <span class="token operator">=</span> cy<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        ind <span class="token operator">=</span> len<span class="token punctuation">(</span>cx<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    alpha <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span>ty <span class="token operator">-</span> state<span class="token punctuation">.</span>y<span class="token punctuation">,</span> tx <span class="token operator">-</span> state<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> state<span class="token punctuation">.</span>yaw    <span class="token keyword">if</span> state<span class="token punctuation">.</span>v <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># back</span>        alpha <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">-</span> alpha    Lf <span class="token operator">=</span> k <span class="token operator">*</span> state<span class="token punctuation">.</span>v <span class="token operator">+</span> Lfc    delta <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token number">2.0</span> <span class="token operator">*</span> L <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span> <span class="token operator">/</span> Lf<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> delta<span class="token punctuation">,</span> ind    <span class="token comment" spellcheck="true"># 搜索最临近的路点，且符合预瞄距离要求</span><span class="token keyword">def</span> <span class="token function">calc_target_index</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">)</span><span class="token punctuation">:</span>    dx <span class="token operator">=</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>x <span class="token operator">-</span> icx <span class="token keyword">for</span> icx <span class="token keyword">in</span> cx<span class="token punctuation">]</span>    dy <span class="token operator">=</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>y <span class="token operator">-</span> icy <span class="token keyword">for</span> icy <span class="token keyword">in</span> cy<span class="token punctuation">]</span>    d <span class="token operator">=</span> <span class="token punctuation">[</span>abs<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>idx <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> idy <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>idx<span class="token punctuation">,</span> idy<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">]</span>    ind <span class="token operator">=</span> d<span class="token punctuation">.</span>index<span class="token punctuation">(</span>min<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    L <span class="token operator">=</span> <span class="token number">0.0</span>    Lf <span class="token operator">=</span> k <span class="token operator">*</span> state<span class="token punctuation">.</span>v <span class="token operator">+</span> Lfc      <span class="token comment" spellcheck="true">#当前位置的实际预瞄距离</span>    <span class="token keyword">while</span> Lf <span class="token operator">></span> L <span class="token operator">and</span> <span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>cx<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> cx<span class="token punctuation">[</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> cx<span class="token punctuation">[</span>ind<span class="token punctuation">]</span>        dy <span class="token operator">=</span> cy<span class="token punctuation">[</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> cy<span class="token punctuation">[</span>ind<span class="token punctuation">]</span>        L <span class="token operator">+=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>dx <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> dy <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>        ind <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> ind<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 设置目标路点</span>    cx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    cy <span class="token operator">=</span> <span class="token punctuation">[</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>ix <span class="token operator">/</span> <span class="token number">5.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> ix <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token keyword">for</span> ix <span class="token keyword">in</span> cx<span class="token punctuation">]</span>    target_speed <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">3.6</span>  <span class="token comment" spellcheck="true"># [m/s]</span>    T <span class="token operator">=</span> <span class="token number">100.0</span>  <span class="token comment" spellcheck="true"># 最大模拟时间</span>    <span class="token comment" spellcheck="true"># 设置车辆的初始状态</span>    state <span class="token operator">=</span> VehicleState<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> v<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span>    lastIndex <span class="token operator">=</span> len<span class="token punctuation">(</span>cx<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    time <span class="token operator">=</span> <span class="token number">0.0</span>    x <span class="token operator">=</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>x<span class="token punctuation">]</span>    y <span class="token operator">=</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>y<span class="token punctuation">]</span>    yaw <span class="token operator">=</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>yaw<span class="token punctuation">]</span>    v <span class="token operator">=</span> <span class="token punctuation">[</span>state<span class="token punctuation">.</span>v<span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span>    target_ind <span class="token operator">=</span> calc_target_index<span class="token punctuation">(</span>state<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">)</span>    <span class="token keyword">while</span> T <span class="token operator">>=</span> time <span class="token operator">and</span> lastIndex <span class="token operator">></span> target_ind<span class="token punctuation">:</span>        ai <span class="token operator">=</span> PControl<span class="token punctuation">(</span>target_speed<span class="token punctuation">,</span> state<span class="token punctuation">.</span>v<span class="token punctuation">)</span>        di<span class="token punctuation">,</span> target_ind <span class="token operator">=</span> pure_pursuit_control<span class="token punctuation">(</span>state<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> target_ind<span class="token punctuation">)</span>        state <span class="token operator">=</span> update<span class="token punctuation">(</span>state<span class="token punctuation">,</span> ai<span class="token punctuation">,</span> di<span class="token punctuation">)</span>        time <span class="token operator">=</span> time <span class="token operator">+</span> dt        x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        yaw<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">.</span>yaw<span class="token punctuation">)</span>        v<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">.</span>v<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> <span class="token string">".r"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"course"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">"-b"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"trajectory"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>cx<span class="token punctuation">[</span>target_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> cy<span class="token punctuation">[</span>target_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"go"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"target"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"equal"</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Speed[km/h]:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>state<span class="token punctuation">.</span>v <span class="token operator">*</span> <span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plt.cla()清除轴，当前活动轴在当前图中。 它保持其他轴不变。</span><span class="token comment" spellcheck="true"># plt.clf()清除整个当前数字。与所有的轴，但离开窗口打开，这样它就可以再用在其他的 plots上了。</span><span class="token comment" spellcheck="true"># plt.close()关上窗户，如果未另指定，则该窗口将是当前窗口。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="学习总结—涂志明（11.10）.assets/image-20191110225822486.png" alt="image-20191110225822486" style="zoom:50%;"><p>三.接下来任务规划:</p><p>继续完成Stanley控制算法实现，掌握MPC基本理论，11月内能够独立写出MPC的控制算法实现。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Control </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Control </tag>
            
            <tag> Python </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
